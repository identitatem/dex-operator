# Copyright Red Hat

apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .DexServer.Name }}"
  namespace: "{{ .DexServer.Namespace }}"
  labels:
    control-plane: dex-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{ .DexServer.Name }}"
      dexconfig_name: "{{ .DexServer.Name }}"
      dexconfig_namespace: "{{ .DexServer.Namespace }}"
  template:
    metadata:
      annotations:
      {{ if .RootCAHash}}
        auth.identitatem.io/rootCAHash: "{{ .RootCAHash }}"
      {{ end }}
      {{ if .ConnectorCredentialsHash}}
        auth.identitatem.io/connectorCredentialsHash: "{{ .ConnectorCredentialsHash }}"
      {{ end }}
      {{ if .DexConfigMapHash}}
        auth.identitatem.io/configHash: "{{ .DexConfigMapHash }}"
      {{ end }}
      {{ if .MtlsSecretExpiry}}
        auth.identitatem.io/grpcMtlsExpiry: "{{ .MtlsSecretExpiry }}"
      {{ end }}
      labels:
        app: "{{ .DexServer.Name }}"
        dexconfig_name: "{{ .DexServer.Name }}"
        dexconfig_namespace: "{{ .DexServer.Namespace }}"
        idp-antiaffinity-selector: "{{ .DexServer.Name }}"
    spec:
      securityContext:
        runAsNonRoot: true
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: idp-antiaffinity-selector
                      operator: In
                      values:
                        - "{{ .DexServer.Name }}"
                topologyKey: topology.kubernetes.io/zone
              weight: 70
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: idp-antiaffinity-selector
                      operator: In
                      values:
                        - "{{ .DexServer.Name }}"
                topologyKey: kubernetes.io/hostname
              weight: 35
      containers:
      - command:
        - /usr/local/bin/dex
        - serve
        - /etc/dex/cfg/config.yaml
        env:
        - name: KUBERNETES_POD_NAMESPACE
          value: "{{ .DexServer.Namespace }}"
{{ .AdditionalEnvVariables | indent 8 }}
        image: "{{ .DexImage }}"
        imagePullPolicy: Always
        name: "{{ .DexServer.Name }}"
        ports:
        - containerPort: 5556
          name: https
          protocol: TCP
        - containerPort: 5557
          name: grpc
          protocol: TCP
        resources: {}
        volumeMounts:
        - mountPath: /etc/dex/cfg
          name: config
        - mountPath: /etc/dex/tls
          name: tls
        - mountPath: /etc/dex/mtls
          name: mtls                  
{{ .AdditionalVolumeMounts | indent 8 }}
        livenessProbe:
          httpGet:
            path: /healthz
            port: 5556
            scheme: HTTPS
        readinessProbe:
          httpGet:
            path: /healthz
            port: 5556
            scheme: HTTPS  
      serviceAccountName: "{{ .ServiceAccountName }}"
      tolerations:
        - key: node-role.kubernetes.io/infra
          operator: Exists
          effect: NoSchedule
        - key: dedicated
          operator: Exists
          effect: NoSchedule
      volumes:
      - configMap:
          items:
          - key: config.yaml
            path: config.yaml
          name: "{{ .DexServer.Name }}"
        name: config
      - name: tls
        secret:
          secretName: "{{ .TlsSecretName }}"
      - name: mtls
        secret:
          secretName: "{{ .MtlsSecretName }}"
{{ .AdditionalVolumes | indent 6 }}
